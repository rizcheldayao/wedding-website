{
  "_args": [
    [
      {
        "raw": "extract-text-webpack-plugin-webpack-2",
        "scope": null,
        "escapedName": "extract-text-webpack-plugin-webpack-2",
        "name": "extract-text-webpack-plugin-webpack-2",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/rizchel/Documents/Wedding/wedding-website"
    ]
  ],
  "_from": "extract-text-webpack-plugin-webpack-2@latest",
  "_id": "extract-text-webpack-plugin-webpack-2@1.0.1",
  "_inCache": true,
  "_location": "/extract-text-webpack-plugin-webpack-2",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-9-west.internal.npmjs.com",
    "tmp": "tmp/extract-text-webpack-plugin-webpack-2-1.0.1.tgz_1455630289470_0.5305309693794698"
  },
  "_npmUser": {
    "name": "bkniffler",
    "email": "bkniffler@me.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {
    "big.js": "3.2.0",
    "emojis-list": "2.1.0",
    "json5": "0.5.1",
    "object-assign": "4.1.1",
    "source-map": "0.5.7"
  },
  "_requested": {
    "raw": "extract-text-webpack-plugin-webpack-2",
    "scope": null,
    "escapedName": "extract-text-webpack-plugin-webpack-2",
    "name": "extract-text-webpack-plugin-webpack-2",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "http://registry.npmjs.org/extract-text-webpack-plugin-webpack-2/-/extract-text-webpack-plugin-webpack-2-1.0.1.tgz",
  "_shasum": "763158bb99f109afd0cc9b44a516a57879cf6658",
  "_shrinkwrap": null,
  "_spec": "extract-text-webpack-plugin-webpack-2",
  "_where": "/Users/rizchel/Documents/Wedding/wedding-website",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/extract-text-webpack-plugin/issues"
  },
  "dependencies": {
    "async": "^1.5.0",
    "loader-utils": "^0.2.3",
    "webpack-sources": "^0.1.0"
  },
  "description": "Extract text from bundle into a file.",
  "devDependencies": {
    "codecov.io": "^0.1.2",
    "coveralls": "^2.11.2",
    "css-loader": "^0.21.0",
    "file-loader": "^0.8.4",
    "istanbul": "^0.3.13",
    "mocha": "^2.3.3",
    "mocha-lcov-reporter": "0.0.2",
    "raw-loader": "^0.5.1",
    "should": "^7.1.1",
    "style-loader": "^0.13.0",
    "webpack": "^1.12.2"
  },
  "directories": {},
  "dist": {
    "shasum": "763158bb99f109afd0cc9b44a516a57879cf6658",
    "tarball": "https://registry.npmjs.org/extract-text-webpack-plugin-webpack-2/-/extract-text-webpack-plugin-webpack-2-1.0.1.tgz"
  },
  "gitHead": "6053a4cd46c0f550ceb360538a16f27c1a6a17a9",
  "homepage": "http://github.com/webpack/extract-text-webpack-plugin",
  "license": "MIT",
  "maintainers": [
    {
      "name": "bkniffler",
      "email": "bkniffler@me.com"
    }
  ],
  "name": "extract-text-webpack-plugin-webpack-2",
  "optionalDependencies": {},
  "readme": "# extract text plugin for webpack\n\n## Usage example with css\n\n``` javascript\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nmodule.exports = {\n\tmodule: {\n\t\tloaders: [\n\t\t\t{ test: /\\.css$/, loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") }\n\t\t]\n\t},\n\tplugins: [\n\t\tnew ExtractTextPlugin(\"styles.css\")\n\t]\n}\n```\n\nIt moves every `require(\"style.css\")` in entry chunks into a separate css output file. So your styles are no longer inlined into the javascript, but separate in a css bundle file (`styles.css`). If your total stylesheet volume is big, it will be faster because the stylesheet bundle is loaded in parallel to the javascript bundle.\n\nAdvantages:\n\n* Fewer style tags (older IE has a limit)\n* CSS SourceMap (with `devtool: \"source-map\"` and `css-loader?sourceMap`)\n* CSS requested in parallel\n* CSS cached separate\n* Faster runtime (less code and DOM operations)\n\nCaveats:\n\n* Additional HTTP request\n* Longer compilation time\n* More complex configuration\n* No runtime public path modification\n* No Hot Module Replacement\n\n## API\n\n``` javascript\nnew ExtractTextPlugin([id: string], filename: string, [options])\n```\n\n* `id` Unique ident for this plugin instance. (For advanded usage only, by default automatic generated)\n* `filename` the filename of the result file. May contain `[name]`, `[id]` and `[contenthash]`.\n  * `[name]` the name of the chunk\n  * `[id]` the number of the chunk\n  * `[contenthash]` a hash of the content of the extracted file\n* `options`\n  * `allChunks` extract from all additional chunks too (by default it extracts only from the initial chunk(s))\n  * `disable` disables the plugin\n\nThe `ExtractTextPlugin` generates an output file per entry, so you must use `[name]`, `[id]` or `[contenthash]` when using multiple entries.\n\n``` javascript\nExtractTextPlugin.extract([notExtractLoader], loader, [options])\n```\n\nCreates an extracting loader from an existing loader.\n\n* `notExtractLoader` (optional) the loader(s) that should be used when the css is not extracted (i.e. in an additional chunk when `allChunks: false`)\n* `loader` the loader(s) that should be used for converting the resource to a css exporting module.\n* `options`\n  * `publicPath` override the `publicPath` setting for this loader.\n\nThere is also an `extract` function on the instance. You should use this if you have more than one ExtractTextPlugin.\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/webpack/extract-text-webpack-plugin.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "publish-patch": "mocha && npm version patch && git push && git push --tags && npm publish",
    "test": "mocha",
    "travis": "npm run cover -- --report lcovonly"
  },
  "version": "1.0.1"
}
